head(sort(unique(tabela[, ocorrencia_latitude])), 135)
head(sort(unique(tabela[, ocorrencia_longitude])), 40)
tail(sort(unique(tabela[, ocorrencia_longitude])), 40)
# Seleciona as colunas relevantes, e dá um distinct para evitar observações duplicadas
ocorrencias_tempo_prep <- unique(tabela[, .(ocorrencia_dia, codigo_ocorrencia)])
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = base::format(ocorrencia_dia, "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = base::format(ocorrencia_dia, tryFormats = "%Y")), keyby = c("ocorrencia_dia")]
# Seleciona as colunas relevantes, e dá um distinct para evitar observações duplicadas
ocorrencias_tempo_prep <- unique(tabela[, .(ocorrencia_dia, codigo_ocorrencia)])
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = base::format(ocorrencia_dia, tryFormats = "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo |>
e_charts(ocorrencia_dia) |>
e_calendar(range = c(min(ocorrencias_tempo$ocorrencia_ano), max(ocorrencias_tempo$ocorrencia_ano))) |>
e_heatmap(N, coord_system = "calendar") |>
e_visual_map(max = max(ocorrencias_tempo$N)) |>
e_title("Calendar", "Heatmap")
## Global options
knitr::opts_chunk$set(cache = TRUE)
# Pacotes
library(data.table) # Framework de manipulação dos dados
library(echarts4r) # Framework de visualização de séries temporais
library(reactable) # Framework de tabelas HTML em React
# Tabela Central - Ocorrência
ocorrencia <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/ocorrencia.csv",
encoding = "UTF-8"
)
# Tabela Complementar 1 - Código de Ocorrência 1
ocorrencia_tipo <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/ocorrencia_tipo.csv",
encoding = "UTF-8"
)
# Tabela Complementar 2 - Código de Ocorrência 2
aeronave <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/aeronave.csv",
encoding = "UTF-8"
)
# Tabela Complementar 3 - Código de Ocorrência 3
fator_contribuinte <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/fator_contribuinte.csv",
encoding = "UTF-8"
)
# Tabela Complementar 4 - Código de Ocorrência 4
recomendacao <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/recomendacao.csv",
encoding = "UTF-8"
)
nome_tabelas_complementares = list("OCORRENCIA_TIPO", "AERONAVE", "FATOR_CONTRIBUINTE", "RECOMENDACAO")
chave_tabelas_complementares = list("codigo_ocorrencia1", "codigo_ocorrencia2", "codigo_ocorrencia3", "codigo_ocorrencia4")
reactable::reactable(data.table::data.table(nome_tabelas_complementares, chave_tabelas_complementares))
head(ocorrencia[, c("codigo_ocorrencia", "codigo_ocorrencia1", "codigo_ocorrencia2", "codigo_ocorrencia3", "codigo_ocorrencia4")])
identical(
ocorrencia[, codigo_ocorrencia],
ocorrencia[, codigo_ocorrencia1],
ocorrencia[, codigo_ocorrencia2],
ocorrencia[, codigo_ocorrencia3],
ocorrencia[, codigo_ocorrencia4]
)
cruzamento1 <- ocorrencia[ocorrencia_tipo, on = "codigo_ocorrencia1"] # Left Join 1
cruzamento2 <- cruzamento1[aeronave, on = "codigo_ocorrencia2"] # Left Join 2
cruzamento3 <- cruzamento2[fator_contribuinte, on = "codigo_ocorrencia3"] # Left Join 3
# tabela <- cruzamento3[recomendacao, on = "codigo_ocorrencia4"] # Left Join 4
head(ocorrencia[, .(n = .N), by = codigo_ocorrencia][n > 1][order(-n)])
head(ocorrencia_tipo[, .(n = .N), by = codigo_ocorrencia1][n > 1][order(-n)])
head(aeronave[, .(n = .N), by = codigo_ocorrencia2][n > 1][order(-n)])
head(fator_contribuinte[, .(n = .N), by = codigo_ocorrencia3][n > 1][order(-n)])
head(recomendacao[, .(n = .N), by = codigo_ocorrencia4][n > 1][order(-n)])
cruzamento1 <- ocorrencia_tipo[ocorrencia, on = "codigo_ocorrencia1", allow.cartesian = TRUE] # Left Join 1
cruzamento2 <- aeronave[cruzamento1, on = "codigo_ocorrencia2", allow.cartesian = TRUE] # Left Join 2
cruzamento3 <- fator_contribuinte[cruzamento2, on = "codigo_ocorrencia3", allow.cartesian = TRUE] # Left Join 3
tabela <- recomendacao[cruzamento3, on = "codigo_ocorrencia4", allow.cartesian = TRUE] # Left Join 4
head(tabela)
# Extrai o nome (e a ordem) das colunas pré cruzamento
colunas0 <- names(ocorrencia)
colunas1 <- names(ocorrencia_tipo)[2:length(names(ocorrencia_tipo))] # Eliminando a coluna de codigo_ocorrencia1
colunas2 <- names(aeronave)[2:length(names(aeronave))] # Eliminando a coluna de codigo_ocorrencia2
colunas3 <- names(fator_contribuinte)[2:length(names(fator_contribuinte))] # Eliminando a coluna de codigo_ocorrencia3
colunas4 <- names(recomendacao)[2:length(names(recomendacao))] # Eliminando a coluna de codigo_ocorrencia4
# Concatena os nomes das colunas
ordem_colunas <- c(colunas0, colunas1, colunas2, colunas3, colunas4)
# Atualiza a ordem na tabela por referência
data.table::setcolorder(tabela, ordem_colunas)
str(tabela)
# Seleciona as colunas que são do tipo character (texto), e guarda na colunas_texto
indices_colunas_texto <- which(unlist(lapply(tabela, is.character)))
colunas_texto <- names(tabela)[indices_colunas_texto]
# Para cada coluna do colunas_texto, troca o valor estranho para missing (NA) usando ifelse
tabela[, (colunas_texto) := lapply(.SD, function(x) ifelse(
x == "***"
| x == "****"
| x == "*****"
| x == "******"
| x == "*******"
| x == "********"
| x == "*********"
| x == "****_***"
| x == "****_****"
| x == "NULL"
| x == "",
NA, x)), .SDcols = colunas_texto]
names(tabela)[grepl("*dia", names(tabela))]
de_texto_para_data <- names(tabela)[grepl("*dia", names(tabela))]
str(tabela[, ..de_texto_para_data])
# Converte somente a coluna ocorrencia_dia por ter um formato diferente (DD/MM/YYYY)
tabela[, ocorrencia_dia := as.IDate(ocorrencia_dia, "%d/%m/%Y")]
# Converte colunas que possuem o formato (YYYY-MM-DD)
tabela[, `:=`(
divulgacao_dia_publicacao = as.IDate(divulgacao_dia_publicacao, "%Y-%m-%d"),
recomendacao_dia_assinatura = as.IDate(recomendacao_dia_assinatura, "%Y-%m-%d"),
recomendacao_dia_encaminhamento = as.IDate(recomendacao_dia_encaminhamento, "%Y-%m-%d"),
recomendacao_dia_feedback = as.IDate(recomendacao_dia_feedback, "%Y-%m-%d")
)]
# Converte a coluna ocorrencia_hora para o formato ITime
tabela[, ocorrencia_hora := as.ITime(ocorrencia_hora, "%d/%m/%Y")]
colunas_texto_para_numero <- c(
"ocorrencia_latitude",
"ocorrencia_longitude",
"aeronave_assentos",
"aeronave_ano_fabricacao"
)
# tabela[, (colunas_texto_para_numero) := lapply(.SD, function(x) as.numeric(x)), .SDcols = colunas_texto_para_numero]
tabela[, `:=`(
aeronave_assentos = as.numeric(aeronave_assentos),
aeronave_ano_fabricacao = as.numeric(aeronave_ano_fabricacao)
)]
# Observações que ainda possuem asteriscos
unique(tabela$ocorrencia_latitude)[grepl("\\*", unique(tabela$ocorrencia_latitude))]
# Observações que ainda possuem asteriscos
unique(tabela$ocorrencia_longitude)[grepl("\\*", unique(tabela$ocorrencia_longitude))]
tabela[ocorrencia_latitude %like% "”", ocorrencia_latitude]
tabela[ocorrencia_longitude %like% "”", ocorrencia_longitude]
head(sort(unique(tabela[, ocorrencia_latitude])), 135)
head(sort(unique(tabela[, ocorrencia_longitude])), 40)
tail(sort(unique(tabela[, ocorrencia_longitude])), 55)
### Caso 1 - Espaço, e.g. "- 22.75944"
tabela[, ocorrencia_latitude := gsub(" ", "", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub(" ", "", ocorrencia_longitude)]
### Caso 2 - Vírgula, e.g. "-0,889722"
tabela[, ocorrencia_latitude := gsub(",", ".", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub(",", ".", ocorrencia_longitude)]
### Caso 3 - Duplo negativo, e.g. "--49.0324242"
tabela[, ocorrencia_latitude := gsub("--", "-", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub("--", "-", ocorrencia_longitude)]
### Caso 4 - Com a palavra Latitude/Longitude na frente, e.g. "Longitude:-47."
tabela[ocorrencia_latitude %like% "Latitude", ocorrencia_latitude := gsub("Latitude:", "", ocorrencia_latitude)]
tabela[ocorrencia_longitude %like% "Longitude", ocorrencia_longitude := gsub("Longitude:", "", ocorrencia_longitude)]
### Caso 5 - Coordenada em DMS - Decimal degrees, minutes and seconds
tabela[ocorrencia_latitude == "15°39’00”S", ocorrencia_latitude := "-15.650000"]
tabela[ocorrencia_longitude == "056°07’03”W", ocorrencia_longitude := "-56.117500"]
### Caso 6 - Asteriscos na frente ou atrás do número (só Lat)
tabela[ocorrencia_latitude == "***-22.98575784", ocorrencia_latitude := "-22.98575784"]
tabela[ocorrencia_latitude == "-14.71083***", ocorrencia_latitude := "-14.71083"]
### Caso 7 - Possui/termina com S, N, W, ou E, mas não está formatado em coordenadas DMS como no Caso 5
tabela[, ocorrencia_latitude := gsub("S", "", ocorrencia_latitude)]
tabela[, ocorrencia_latitude := gsub("N", "", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub("W", "", ocorrencia_longitude)]
tabela[, ocorrencia_longitude := gsub("E", "", ocorrencia_longitude)]
### Caso 8 - Possui/termina com o símbolo de Grau ("º"/"°")
tabela[, ocorrencia_latitude := gsub("°", "", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub("°", "", ocorrencia_longitude)]
tabela_ <- data.table::copy(tabela)
### Caso 9 - Número cheio de separadores usando ponto ("."). (Lat e Log)
# Cria flag marcando casos que possíveis não estão todos corretos
tabela[, flag_lat_long := fifelse(
lengths(regmatches(ocorrencia_latitude, gregexpr("\\.", ocorrencia_latitude))) > 1
| lengths(regmatches(ocorrencia_longitude, gregexpr("\\.", ocorrencia_longitude))) > 1,
FALSE,
TRUE
)
]
# Latitude
tabela[
lengths(regmatches(ocorrencia_latitude, gregexpr("\\.", ocorrencia_latitude))) > 1,
ocorrencia_latitude := fifelse(
as.numeric(gsub("\\.", "", ocorrencia_latitude)) > 0,
sub("(.{2})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_latitude)),
sub("(.{3})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_latitude))
)
]
# Longitude
tabela[
lengths(regmatches(ocorrencia_longitude, gregexpr("\\.", ocorrencia_longitude))) > 1,
ocorrencia_longitude := fifelse(
as.numeric(gsub("\\.", "", ocorrencia_longitude)) > 0,
sub("(.{2})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_longitude)),
sub("(.{3})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_longitude))
)
]
### Após tratamentos, FINALMENTE converte as colunas para numérico
tabela[, `:=`(
ocorrencia_latitude = as.numeric(ocorrencia_latitude),
ocorrencia_longitude = as.numeric(ocorrencia_longitude)
)]
### Caso 10 - 44993 e 50794 não possuem longitude
# Como a ocorrencia 44993 foi na cidade do Rio de Janeiro, aproxima usando as coordenadas
# do Aeroporto Doméstico Santos Dumont: -22.90825417333246, -43.16789880589976
tabela[codigo_ocorrencia == 44993, ocorrencia_longitude := -43.16789880589976]
# Como a ocorrencia 50794 foi na cidade de Turmalina, MG, aproxima usando as coordenadas
# do ponto zero da cidade: -17.285824901708047, -42.731887838264434
tabela[codigo_ocorrencia == 50794, ocorrencia_longitude := -42.731887838264434]
head(sort(unique(tabela[, ocorrencia_latitude])), 135)
head(sort(unique(tabela[, ocorrencia_longitude])), 40)
tail(sort(unique(tabela[, ocorrencia_longitude])), 40)
# Seleciona as colunas relevantes, e dá um distinct para evitar observações duplicadas
ocorrencias_tempo_prep <- unique(tabela[, .(ocorrencia_dia, codigo_ocorrencia)])
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = base::format(ocorrencia_dia, tryFormats = "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
ocorrencias_tempo[, .(N = sum(N)), keyby = ocorrencia_ano]
ocorrencias_tempo[, .(N = sum(N)), keyby = ocorrencia_ano]
## Global options
knitr::opts_chunk$set(cache = TRUE)
# Pacotes
library(data.table) # Framework de manipulação dos dados
library(echarts4r) # Framework de visualização de séries temporais
library(reactable) # Framework de tabelas HTML em React
# Tabela Central - Ocorrência
ocorrencia <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/ocorrencia.csv",
encoding = "UTF-8"
)
# Tabela Complementar 1 - Código de Ocorrência 1
ocorrencia_tipo <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/ocorrencia_tipo.csv",
encoding = "UTF-8"
)
# Tabela Complementar 2 - Código de Ocorrência 2
aeronave <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/aeronave.csv",
encoding = "UTF-8"
)
# Tabela Complementar 3 - Código de Ocorrência 3
fator_contribuinte <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/fator_contribuinte.csv",
encoding = "UTF-8"
)
# Tabela Complementar 4 - Código de Ocorrência 4
recomendacao <- data.table::fread(
"http://sistema.cenipa.aer.mil.br/cenipa/media/opendata/recomendacao.csv",
encoding = "UTF-8"
)
nome_tabelas_complementares = list("OCORRENCIA_TIPO", "AERONAVE", "FATOR_CONTRIBUINTE", "RECOMENDACAO")
chave_tabelas_complementares = list("codigo_ocorrencia1", "codigo_ocorrencia2", "codigo_ocorrencia3", "codigo_ocorrencia4")
reactable::reactable(data.table::data.table(nome_tabelas_complementares, chave_tabelas_complementares))
head(ocorrencia[, c("codigo_ocorrencia", "codigo_ocorrencia1", "codigo_ocorrencia2", "codigo_ocorrencia3", "codigo_ocorrencia4")])
identical(
ocorrencia[, codigo_ocorrencia],
ocorrencia[, codigo_ocorrencia1],
ocorrencia[, codigo_ocorrencia2],
ocorrencia[, codigo_ocorrencia3],
ocorrencia[, codigo_ocorrencia4]
)
cruzamento1 <- ocorrencia[ocorrencia_tipo, on = "codigo_ocorrencia1"] # Left Join 1
cruzamento2 <- cruzamento1[aeronave, on = "codigo_ocorrencia2"] # Left Join 2
cruzamento3 <- cruzamento2[fator_contribuinte, on = "codigo_ocorrencia3"] # Left Join 3
# tabela <- cruzamento3[recomendacao, on = "codigo_ocorrencia4"] # Left Join 4
head(ocorrencia[, .(n = .N), by = codigo_ocorrencia][n > 1][order(-n)])
head(ocorrencia_tipo[, .(n = .N), by = codigo_ocorrencia1][n > 1][order(-n)])
head(aeronave[, .(n = .N), by = codigo_ocorrencia2][n > 1][order(-n)])
head(fator_contribuinte[, .(n = .N), by = codigo_ocorrencia3][n > 1][order(-n)])
head(recomendacao[, .(n = .N), by = codigo_ocorrencia4][n > 1][order(-n)])
cruzamento1 <- ocorrencia_tipo[ocorrencia, on = "codigo_ocorrencia1", allow.cartesian = TRUE] # Left Join 1
cruzamento2 <- aeronave[cruzamento1, on = "codigo_ocorrencia2", allow.cartesian = TRUE] # Left Join 2
cruzamento3 <- fator_contribuinte[cruzamento2, on = "codigo_ocorrencia3", allow.cartesian = TRUE] # Left Join 3
tabela <- recomendacao[cruzamento3, on = "codigo_ocorrencia4", allow.cartesian = TRUE] # Left Join 4
head(tabela)
# Extrai o nome (e a ordem) das colunas pré cruzamento
colunas0 <- names(ocorrencia)
colunas1 <- names(ocorrencia_tipo)[2:length(names(ocorrencia_tipo))] # Eliminando a coluna de codigo_ocorrencia1
colunas2 <- names(aeronave)[2:length(names(aeronave))] # Eliminando a coluna de codigo_ocorrencia2
colunas3 <- names(fator_contribuinte)[2:length(names(fator_contribuinte))] # Eliminando a coluna de codigo_ocorrencia3
colunas4 <- names(recomendacao)[2:length(names(recomendacao))] # Eliminando a coluna de codigo_ocorrencia4
# Concatena os nomes das colunas
ordem_colunas <- c(colunas0, colunas1, colunas2, colunas3, colunas4)
# Atualiza a ordem na tabela por referência
data.table::setcolorder(tabela, ordem_colunas)
str(tabela)
# Seleciona as colunas que são do tipo character (texto), e guarda na colunas_texto
indices_colunas_texto <- which(unlist(lapply(tabela, is.character)))
colunas_texto <- names(tabela)[indices_colunas_texto]
# Para cada coluna do colunas_texto, troca o valor estranho para missing (NA) usando ifelse
tabela[, (colunas_texto) := lapply(.SD, function(x) ifelse(
x == "***"
| x == "****"
| x == "*****"
| x == "******"
| x == "*******"
| x == "********"
| x == "*********"
| x == "****_***"
| x == "****_****"
| x == "NULL"
| x == "",
NA, x)), .SDcols = colunas_texto]
names(tabela)[grepl("*dia", names(tabela))]
de_texto_para_data <- names(tabela)[grepl("*dia", names(tabela))]
str(tabela[, ..de_texto_para_data])
# Converte somente a coluna ocorrencia_dia por ter um formato diferente (DD/MM/YYYY)
tabela[, ocorrencia_dia := as.IDate(ocorrencia_dia, "%d/%m/%Y")]
# Converte colunas que possuem o formato (YYYY-MM-DD)
tabela[, `:=`(
divulgacao_dia_publicacao = as.IDate(divulgacao_dia_publicacao, "%Y-%m-%d"),
recomendacao_dia_assinatura = as.IDate(recomendacao_dia_assinatura, "%Y-%m-%d"),
recomendacao_dia_encaminhamento = as.IDate(recomendacao_dia_encaminhamento, "%Y-%m-%d"),
recomendacao_dia_feedback = as.IDate(recomendacao_dia_feedback, "%Y-%m-%d")
)]
# Converte a coluna ocorrencia_hora para o formato ITime
tabela[, ocorrencia_hora := as.ITime(ocorrencia_hora, "%d/%m/%Y")]
colunas_texto_para_numero <- c(
"ocorrencia_latitude",
"ocorrencia_longitude",
"aeronave_assentos",
"aeronave_ano_fabricacao"
)
# tabela[, (colunas_texto_para_numero) := lapply(.SD, function(x) as.numeric(x)), .SDcols = colunas_texto_para_numero]
tabela[, `:=`(
aeronave_assentos = as.numeric(aeronave_assentos),
aeronave_ano_fabricacao = as.numeric(aeronave_ano_fabricacao)
)]
# Observações que ainda possuem asteriscos
unique(tabela$ocorrencia_latitude)[grepl("\\*", unique(tabela$ocorrencia_latitude))]
# Observações que ainda possuem asteriscos
unique(tabela$ocorrencia_longitude)[grepl("\\*", unique(tabela$ocorrencia_longitude))]
tabela[ocorrencia_latitude %like% "”", ocorrencia_latitude]
tabela[ocorrencia_longitude %like% "”", ocorrencia_longitude]
head(sort(unique(tabela[, ocorrencia_latitude])), 135)
head(sort(unique(tabela[, ocorrencia_longitude])), 40)
tail(sort(unique(tabela[, ocorrencia_longitude])), 55)
### Caso 1 - Espaço, e.g. "- 22.75944"
tabela[, ocorrencia_latitude := gsub(" ", "", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub(" ", "", ocorrencia_longitude)]
### Caso 2 - Vírgula, e.g. "-0,889722"
tabela[, ocorrencia_latitude := gsub(",", ".", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub(",", ".", ocorrencia_longitude)]
### Caso 3 - Duplo negativo, e.g. "--49.0324242"
tabela[, ocorrencia_latitude := gsub("--", "-", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub("--", "-", ocorrencia_longitude)]
### Caso 4 - Com a palavra Latitude/Longitude na frente, e.g. "Longitude:-47."
tabela[ocorrencia_latitude %like% "Latitude", ocorrencia_latitude := gsub("Latitude:", "", ocorrencia_latitude)]
tabela[ocorrencia_longitude %like% "Longitude", ocorrencia_longitude := gsub("Longitude:", "", ocorrencia_longitude)]
### Caso 5 - Coordenada em DMS - Decimal degrees, minutes and seconds
tabela[ocorrencia_latitude == "15°39’00”S", ocorrencia_latitude := "-15.650000"]
tabela[ocorrencia_longitude == "056°07’03”W", ocorrencia_longitude := "-56.117500"]
### Caso 6 - Asteriscos na frente ou atrás do número (só Lat)
tabela[ocorrencia_latitude == "***-22.98575784", ocorrencia_latitude := "-22.98575784"]
tabela[ocorrencia_latitude == "-14.71083***", ocorrencia_latitude := "-14.71083"]
### Caso 7 - Possui/termina com S, N, W, ou E, mas não está formatado em coordenadas DMS como no Caso 5
tabela[, ocorrencia_latitude := gsub("S", "", ocorrencia_latitude)]
tabela[, ocorrencia_latitude := gsub("N", "", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub("W", "", ocorrencia_longitude)]
tabela[, ocorrencia_longitude := gsub("E", "", ocorrencia_longitude)]
### Caso 8 - Possui/termina com o símbolo de Grau ("º"/"°")
tabela[, ocorrencia_latitude := gsub("°", "", ocorrencia_latitude)]
tabela[, ocorrencia_longitude := gsub("°", "", ocorrencia_longitude)]
tabela_ <- data.table::copy(tabela)
### Caso 9 - Número cheio de separadores usando ponto ("."). (Lat e Log)
# Cria flag marcando casos que possíveis não estão todos corretos
tabela[, flag_lat_long := fifelse(
lengths(regmatches(ocorrencia_latitude, gregexpr("\\.", ocorrencia_latitude))) > 1
| lengths(regmatches(ocorrencia_longitude, gregexpr("\\.", ocorrencia_longitude))) > 1,
FALSE,
TRUE
)
]
# Latitude
tabela[
lengths(regmatches(ocorrencia_latitude, gregexpr("\\.", ocorrencia_latitude))) > 1,
ocorrencia_latitude := fifelse(
as.numeric(gsub("\\.", "", ocorrencia_latitude)) > 0,
sub("(.{2})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_latitude)),
sub("(.{3})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_latitude))
)
]
# Longitude
tabela[
lengths(regmatches(ocorrencia_longitude, gregexpr("\\.", ocorrencia_longitude))) > 1,
ocorrencia_longitude := fifelse(
as.numeric(gsub("\\.", "", ocorrencia_longitude)) > 0,
sub("(.{2})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_longitude)),
sub("(.{3})(.*)", "\\1.\\2", gsub("\\.", "", ocorrencia_longitude))
)
]
### Após tratamentos, FINALMENTE converte as colunas para numérico
tabela[, `:=`(
ocorrencia_latitude = as.numeric(ocorrencia_latitude),
ocorrencia_longitude = as.numeric(ocorrencia_longitude)
)]
### Caso 10 - 44993 e 50794 não possuem longitude
# Como a ocorrencia 44993 foi na cidade do Rio de Janeiro, aproxima usando as coordenadas
# do Aeroporto Doméstico Santos Dumont: -22.90825417333246, -43.16789880589976
tabela[codigo_ocorrencia == 44993, ocorrencia_longitude := -43.16789880589976]
# Como a ocorrencia 50794 foi na cidade de Turmalina, MG, aproxima usando as coordenadas
# do ponto zero da cidade: -17.285824901708047, -42.731887838264434
tabela[codigo_ocorrencia == 50794, ocorrencia_longitude := -42.731887838264434]
head(sort(unique(tabela[, ocorrencia_latitude])), 135)
head(sort(unique(tabela[, ocorrencia_longitude])), 40)
tail(sort(unique(tabela[, ocorrencia_longitude])), 40)
# Seleciona as colunas relevantes, e dá um distinct para evitar observações duplicadas
ocorrencias_tempo_prep <- unique(tabela[, .(ocorrencia_dia, codigo_ocorrencia)])
ocorrencias_tempo_prep
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = base::format(ocorrencia_dia, tryFormats = "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
# Seleciona as colunas relevantes, e dá um distinct para evitar observações duplicadas
ocorrencias_tempo_prep <- unique(tabela[, .(ocorrencia_dia, codigo_ocorrencia)])
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = as.Date(ocorrencia_dia, format = "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
# Seleciona as colunas relevantes, e dá um distinct para evitar observações duplicadas
ocorrencias_tempo_prep <- unique(tabela[, .(ocorrencia_dia, codigo_ocorrencia)])
ocorrencias_tempo_prep
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = as.Date(ocorrencia_dia, format = "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = as.Date(as.character(ocorrencia_dia), format = "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
ocorrencias_tempo_prep
ocorrencias_tempo_prep$ocorrencia_dia
year(ocorrencias_tempo_prep$ocorrencia_dia)
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = year(ocorrencia_dia)), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
ocorrencias_tempo[, .(N = sum(N)), keyby = ocorrencia_ano] |>
e_charts(ocorrencia_ano) |>
e_line(N) |>
e_title("Número de Ocorrências - Ano a ano")
ocorrencias_tempo |>
e_charts(ocorrencia_dia) |>
e_calendar(range = c(min(ocorrencias_tempo$ocorrencia_ano), max(ocorrencias_tempo$ocorrencia_ano))) |>
e_heatmap(N, coord_system = "calendar") |>
e_visual_map(max = max(ocorrencias_tempo$N)) |>
e_title("Calendar", "Heatmap")
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = base::format(ocorrencia_dia, "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo |>
e_charts(ocorrencia_dia) |>
e_calendar(range = c(min(ocorrencias_tempo$ocorrencia_ano), max(ocorrencias_tempo$ocorrencia_ano))) |>
e_heatmap(N, coord_system = "calendar") |>
e_visual_map(max = max(ocorrencias_tempo$N)) |>
e_title("Calendar", "Heatmap")
ocorrencias_tempo[, .(N = sum(N)), keyby = ocorrencia_ano] |>
e_charts(ocorrencia_ano) |>
e_line(N) |>
e_title("Número de Ocorrências - Ano a ano")
ocorrencias_tempo[, .(Ocorrências = sum(N)), keyby = ocorrencia_ano] |>
e_charts(ocorrencia_ano) |>
e_line(N) |>
e_title("Número de Ocorrências - Ano a ano")
ocorrencias_tempo |>
e_charts(ocorrencia_dia) |>
e_calendar(range = c(min(ocorrencias_tempo$ocorrencia_ano), max(ocorrencias_tempo$ocorrencia_ano))) |>
e_heatmap(N, coord_system = "calendar") |>
e_visual_map(max = max(ocorrencias_tempo$N)) |>
e_title("Calendar", "Heatmap")
ocorrencias_tempo[, .(Ocorrências = sum(N)), keyby = ocorrencia_ano] |>
e_charts(ocorrencia_ano) |>
e_line(N) |>
e_title("Número de Ocorrências - Ano a ano")
ocorrencias_tempo[, .(Ocorrências = sum(N)), keyby = ocorrencia_ano] |>
e_charts(ocorrencia_ano) |>
e_line(Ocorrências) |>
e_title("Número de Ocorrências - Ano a ano")
reactable::reactable(ocorrencias_tempo[, .(N = sum(N)), keyby = ocorrencia_ano])
data.table::year(tabela$ocorrencia_dia)
data.table::year(tabela$ocorrencia_dia[1])
data.table::year(tabela$ocorrencia_dia[1]) %>% class
round(tabela$ocorrencia_dia[1], digits = "years")
round(tabela$ocorrencia_dia[1], digits = "weeks")
round(tabela$ocorrencia_dia[1], digits = c("weeks", years))
round(tabela$ocorrencia_dia[1], digits = c("weeks", "years"))
round(tabela$ocorrencia_dia[1], digits = c("weeks", "years"))
library(data.table)
round(tabela$ocorrencia_dia[1], digits = "years")
as.IDate(2010)
tabela[1, ocorrencia_dia]
tabela[1, ocorrencia_dia] %>% class
as.character(tabela[1, ocorrencia_dia]) %>% class
as.character(tabela[1, ocorrencia_dia])
as.IDate(as.character(tabela[1, ocorrencia_dia])) %>% class
as.IDate(as.character(tabela[1, ocorrencia_dia]), format = "%Y")
as.IDate(as.character(tabela[1, ocorrencia_dia]), "%Y")
format(tabela[1, ocorrencia_dia], "Y"
format(tabela[1, ocorrencia_dia], "%Y")
format(tabela[1, ocorrencia_dia], "%Y") %>% Class
format(tabela[1, ocorrencia_dia], "%Y") %>% class
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = as.character(ocorrencia_dia, "%Y")), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
ocorrencias_tempo$ocorrencia_ano %>% class
#
ocorrencias_tempo <- ocorrencias_tempo_prep[, .(N = .N, ocorrencia_ano = as.character(year(ocorrencia_dia))), keyby = c("ocorrencia_dia")]
ocorrencias_tempo
ocorrencias_tempo %>%
e_charts(ocorrencia_dia) %>%
e_calendar(range = c(min(ocorrencias_tempo$ocorrencia_ano), max(ocorrencias_tempo$ocorrencia_ano))) %>%
e_heatmap(N, coord_system = "calendar") %>%
e_visual_map(max = max(ocorrencias_tempo$N)) %>%
e_title("Calendar", "Heatmap")
ocorrencias_tempo[, .(Ocorrências = sum(N)), keyby = ocorrencia_ano] %>%
e_charts(ocorrencia_ano) %>%
e_line(Ocorrências) %>%
e_title("Número de Ocorrências - Ano a ano")
reactable::reactable(ocorrencias_tempo[, .(N = sum(N)), keyby = ocorrencia_ano])
# Pacotes
library(data.table) # Framework de manipulação dos dados
library(echarts4r) # Framework de visualização de séries temporais
library(reactable) # Framework de tabelas HTML em React
